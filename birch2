#!/usr/bin/env bash
#
# birch - a simple irc client in bash

esc() {
    case $1 in
        cursor_show):  "\\e[?25h"      ;;
        cursor_hide):  "\\e[?25l"      ;;
        cursor_save):  "\\e7"          ;;
        cursor_load):  "\\e8"          ;;
        cursor_move):  "\\e[$2;$3H"    ;;
        cursor_fake):  "\\e[47m \\e[m" ;;
        clear_screen): "\\e[2J"        ;;
        clear_line):   "\\e[K"         ;;
        scroll_area):  "\\e[$2;$3r"    ;;

        *) return
    esac

    printf %b "$_"
}

term_setup() {
    esc cursor_hide
    esc clear_screen
    esc scroll_area 1 "$((LINES - 1))"

    stty -echo
}

term_reset() {
    esc clear_screen
    esc scroll_area
    esc cursor_show

    stty echo

    exec 69>&-
}

term_size() {
    resize=

    shopt -s checkwinsize; (:;:)
}

irc_setup() {
    exec 69<>"/dev/tcp/${host:=irc.freenode.net}/6667" || {
        printf '%s\n' "error: Couldn't connect to $host." >&2
        exit 1
    }

    printf 'NICK %s\n' "${nick:=$USER}" >&69
    printf 'USER %s - - :%s\n' "$nick" "$nick" >&69
    printf 'PASS %s\n' "${pass:-}" >&69
    printf 'JOIN %s\n' "${chan:=#rice}" >&69
}

irc_parse() {
    mesg=${1#* :}
    www=${1%%$mesg*}

    read -ra args <<< "${www##:}"
    IFS='!@' read -r unick _ _ <<< "${args[0]}"
}

irc_printf() {
    # shellcheck disable=2059
    printf -v msg_input "$@"

    printf %s "$msg_input"
    printf %s "$msg_input" >> /dev/shm/irc
}

irc_input() {
    esc cursor_save
    esc cursor_move "$LINES"
    esc clear_line

    printf %s "$chan > $msg"

    esc cursor_fake
    esc cursor_load

    IFS= read -rsn 1 -t 0.01 &&
        case $REPLY in
            $'\177'|$'\b')
                msg=${msg%?}
            ;;

            "")
                irc_cmd "$msg"
                msg=
            ;;

            $'\e') ;;

            *)
                msg+=$REPLY
            ;;
        esac
}

irc_cmd() {
    case $1 in
        /j*)

        ;;

        /n*)
            printf 'NICK %s\n' "${1/* }" >&69
            nick=$_
        ;;

        /m*)
            printf 'PRIVMSG %s\n' "${1/* }" >&69
        ;;

        /q*)
            printf 'QUIT :%s\n' "${1/* }" >&69
            exit
        ;;

        /*)
            printf '%s\n' "error: ${1/ *} not implemented yet."
        ;;

        *)
            printf 'PRIVMSG %s %s\n' "$chan" ":$1" >&69

            # TODO: Don't duplicate this.
            irc_printf '\e[1;3%sm%10s\e[m %s\n' \
                "$((${#nick}/2))" "${nick:0:10}" "$1"
        ;;
    esac
}

irc_output() {
    while read -sru 69 || :; do
        case $REPLY in
            PING*)
                printf 'PONG%s\n' "${REPLY##PING}" >&69
            ;;

            *PRIVMSG*)
                irc_parse "$REPLY"

                irc_printf '\e[1;3%sm%10s\e[m %s\n' \
                    "$((${#unick}/2))" "${unick:0:10}" "$mesg"
            ;;

            *JOIN*|*QUIT*)
                irc_parse "$REPLY"

                case $REPLY in
                    *JOIN*): '-->joined' ;;
                    *QUIT*): '<--left'   ;;
                esac

                irc_printf '%10s %s\n' "${_::3}" \
                    "$unick has ${_:3} ${args[2]}"
            ;;

            *NOTICE*)
                irc_printf '%s\n' "${REPLY##*NOTICE }"
            ;;

            *NICK*)
                irc_parse "$REPLY"

                irc_printf '%10s %s\n' "--" \
                    "$unick is now known as $mesg"
            ;;

            *)
                irc_printf '%s\n' "$REPLY"
            ;;
        esac
    done
}

main() {
    term_size
    irc_setup
    term_setup

    # TODO: Move to function.
    trap 'term_reset; >/dev/shm/irc; kill 0' INT EXIT
    trap 'resize=1' WINCH

    irc_output &

    for ((;;)) {
        irc_input

        [[ $resize ]] && {
            term_size
            term_setup

            # TODO: Pure bash.
            tail "-$((LINES - 1))" < /dev/shm/irc
        }
    }

    wait
    return 0
}

main "$@"
