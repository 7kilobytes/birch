#!/usr/bin/env bash
#
# birch - a simple irc client in bash

clean() {
    printf '\e[2J\e[;r'
    exec 69>&-
    rm -rf -- "$temp_dir"
    kill 0
}

hist_focus() {
    ln -sf "$chan" current >> "./$chan"
}

term_setup() {
    printf '\e[2J\e[1;%sr\e[999H' "$((LINES-1))"
}

term_size() {
    shopt -s checkwinsize; (:;:)
}

term_resize() {
    term_size
    term_setup

    printf '\e[?25l\e7\e[%sH' "$((LINES-1))"
    cat current
    printf '\e8\e[?25h'
}

irc_setup() {
    exec 69<>"/dev/tcp/${s:=irc.freenode.net}/${P:-6667}" || {
        printf '%s\n' "error: Couldn't connect to $s." >&2
        exit 1
    }

    IFS=, read -ra chans <<< "${chan:=${c:-#kisslinux}}"
    chan=${chans[0]}

    printf 'NICK %s\n' "${nick:=${u:-$USER}}" >&69
    printf 'USER %s - - :%s\n' "$nick" "$nick" >&69
    printf 'PASS %s\n' "${p:-}" >&69
    printf 'JOIN %s\n' "${chans[@]}" >&69

    hist_focus
}

irc_parse() {
    mesg=${1#* :}
    www=${1%%$mesg*}

    read -ra args <<< "${www##:}"
    IFS='!@' read -r unick _ _ <<< "${args[0]}"
}

irc_print() {
    printf '\e[?25l\e7\e[%sH' "$((LINES-1))"

    if [[ $2 == \#* && "$2" != "$chan" ]]; then
        printf '%s\n' "$1" >> "$2"

        [[ " ${chans[*]} " != *" $chan "* ]] &&
            chans+=("$chan")

    else
        printf '\r%s\n' "$1"
        printf '%s\n'   "$1" >> current
    fi 2>/dev/null

    printf '\e8\e[?25h'
}

irc_mesg() {
    mesg=$(fold -sw 60 <<< "$1")
    mesg=${mesg//$'\n'/$'\n'           }

    case $4 in
        me) printf -v out '%10s \e[1;3%sm%s\e[m %s' \
                \* "$((${#2}/2))" "$2" "${1/$'\001'}" ;;

         *) printf -v out '\e[1;3%sm%10s\e[m %s' \
                "$((${#2}/2))" "${2:0:10}" "$mesg" ;;
    esac

    irc_print "$out" "$3"
}

irc_cmd() {
    history -s "$1"
    read -ra cmd <<< "$1"

    case $1 in ""|?/*) ;;
        /j*)
            chan=${cmd[1]/\\}

            printf 'JOIN %s\nNAMES %s\n' "$chan" "$chan" >&69

            [[ " ${chans[*]} " != *" $chan "* ]] &&
                chans+=("$chan")

            hist_focus
            kill -WINCH 0
        ;;

       /me*) printf 'PRIVMSG %s :\001ACTION %s\001\n' "$chan" "${cmd[*]:1}" >&69
             irc_mesg "${cmd[*]:1}" "$nick" "$chan" me ;;

        /l*) printf 'PART %s\n' "${cmd[1]:-$chan}" >&69 ;;
        /m*) printf 'PRIVMSG %s :%s\n' "${cmd[1]}" "${cmd[*]:2}" >&69 ;;

        /n*) printf 'NICK %s\n' "${cmd[1]}" >&69
             nick=$_ ;;

        /q*) printf 'QUIT :%s\n' "${cmd[1]}" >&69
             exit ;;

         /*) printf '%s\n' "error: ${cmd[0]} not implemented yet." ;;

          *) printf 'PRIVMSG %s %s\n' "$chan" ":$1" >&69
             irc_mesg "$1" "$nick" "$chan"
    esac
}

irc_output() {
    while read -sru 69 || :; do
        REPLY=${REPLY%%$'\r'*}

        case $REPLY in
            PING*) printf 'PONG%s\n' "${REPLY##PING}" >&69 ;;

            *PRIVMSG*)
                irc_parse "$REPLY"

                [[ $mesg == *$nick* ]] &&
                    mesg=${mesg//$nick/$'\e[1;3'$((${#unick}/2))m$nick$'\e[m'}

                [[ $REPLY == *$'\001ACTION'*$'\001'* ]] && 
                    me=me || me=0

                irc_mesg "${mesg/$'\001ACTION'}" "$unick" "${args[2]}" "$me"
            ;;

            *JOIN*|*PART*|*QUIT*)
                REPLY=${REPLY:1}
                unick=${REPLY%%\!*}
                cur=\#${REPLY#*\#}
                cur=${cur%% *}

                case $REPLY in
                    *JOIN*) cas='-->joined' ;;
                    *PART*) cas='<--left'   ;;
                    *QUIT*) cas='<--quit' cur=$chan
                esac

                printf -v out '%10s \e[1;3%sm%s\e[m %s \e[1m%s\e[m' \
                    "${cas::3}" "$((${#unick}/2))" "$unick" \
                    "has ${cas:3}" "$cur"

                irc_print "$out" "$cur"
            ;;

            *NICK*)
                irc_parse "$REPLY"

                printf -v out '%10s %s\n' "--" \
                    "$unick is now known as $mesg"

                irc_print "$out" "$chan"
            ;;

            *353*) chan=\#${REPLY##*\#} chan=${chan/ *} ;;
            *366*) ;;
            *376*) irc_cmd "${x:-:/}" ;&

            *) irc_print "$REPLY" "$chan" ;;
        esac
    done
}

get_args() {
    while getopts :s:u:p:c:x:P:v opt; do case $opt in
        \?) printf 'use: birch [-s host -u nick -p pass -P port -c chan]\n' 
            exit 1 ;;

         v) printf 'birch 0.0.1\n'
            exit 0 ;;

         :) printf 'Option -%s requires an argument.\n' "$OPTARG" >&2
            exit 1 ;;

         *) declare -g "$opt=$OPTARG" 
    esac; done
}

main() {
    get_args "$@"
    term_size

    export HISTFILE=${TMPDIR:=/tmp}/birch-$$-hist
    mkdir -p "${temp_dir:=$TMPDIR/birch-$$}"
    cd "$temp_dir" > current || exit 1

    irc_setup
    term_setup

    trap clean       INT EXIT
    trap term_resize WINCH

    irc_output & for ((;;)) {
        read -erp "$chan (${cch:=1}/${#chans[@]}) > " && 
            irc_cmd "$REPLY"

        printf '\e[2K'
    }
}

main "$@" ||:
