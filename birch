#!/usr/bin/env bash
#
# birch - a simple irc client in bash

clean() {
    printf '\e[2J\e[;r\e[H'
    exec 69>&-
    rm -rf -- "$temp_dir"
    kill 0
}

hist_focus() {
    ln -sf "$chan" current >> "./$chan"
}

term_setup() {
    printf '\e[2J\e[1;%sr\e[999H' "$((LINES-1))"
}

term_size() {
    shopt -s checkwinsize; (:;:)
}

term_resize() {
    term_size
    term_setup

    printf '\e[?25l\e7\e[%sH' "$((LINES-1))"
    printf '%s\n' "$(< current)"
    printf '\e8\e[?25h'
}

irc_setup() {
    exec 69<>"/dev/tcp/${s:=irc.freenode.net}/${P:-6667}" || {
        printf '%s\n' "error: Couldn't connect to $s." >&2
        exit 1
    }

    IFS=, read -ra chans <<< "${chan:=${c:-#kisslinux}}"

    printf 'NICK %s\nUSER %s - - :%s\nPASS %s\nJOIN %s\n' \
       "${nick:=${u:-$USER}}" "$nick" "$nick" "${p:-}" "${chans[@]}" >&69

    chan=${chans[0]}
    hist_focus
}

prin() {
    printf '\e[?25l\e7\e[%sH' "$((LINES-1))"

    raw=${2//$'\e[1;3'?m} 
    raw=${raw//$'\e[m'}

    # shellcheck disable=2059
    printf -v out "$@"
    printf -v out '\e[%sC%s' "$((${#raw} > 10 ? 0 : 11 - ${#raw}))" "$out"

    out=$(fold -sw 70 <<< "$out")
    out=${out//$'\n'/$'\n'            }

    if [[ $input ]]; then
        printf '\r%s\n' "$out"

    elif [[ $dest == \#* && $dest != "$chan" ]]; then
        printf '%s\n'   "$out" >> "$dest"

        [[ " ${chans[*]} " != *" $dest "* ]] &&
            chans+=("$dest")

    else
        printf '\r%s\n' "$out"
        printf '%s\n'   "$out" >> current
    fi

    printf '\e8\e[?25h'
}

irc_cmd() {
    history -s "$1"
    read -ra cmd <<< "$1"

    send() { parse "$1"; printf '%s\n' "$1" >&69; }

    case $1 in ""|?/*) ;;
        '/join '*)
            chan=${cmd[1]/\\}

            send "JOIN $chan"
            send "NAMES $chan"

            [[ " ${chans[*]} " != *" $chan "* ]] &&
                chans+=("$chan")

            hist_focus
            kill -WINCH 0
        ;;

        '/nick '*) send "NICK ${cmd[1]}"; nick=${cmd[1]} ;;
         '/msg '*) send "PRIVMSG ${cmd[1]} :${cmd[*]:2}" ;;
          '/me '*) send "PRIVMSG $chan :\\001ACTION ${cmd[*]:1}\\001" ;;
         '/part'*) send "PART ${cmd[1]:-$chan}" ;;
         '/quit'*) send "QUIT :${cmd[1]}"; exit ;;
               /*) send "NOTICE :${cmd[0]} not implemented yet" ;;
                *) send "PRIVMSG $chan :$1" ;;
    esac
}

parse() {
    fields=() word='' from='' from_split=()

    [[ "${1%% *}" == *[:@!]* ]] && {
        from=${1%% *}
        IFS='!@' read -ra from_split <<< "${from#:}"
    }

    while IFS= read -d '' -rn 1 c; do case $c in
        ' ') [[ $word ]] && fields+=("$word") word= ;;
        :) break ;;
        *) word+=$c ;;
    esac; done <<< "${1/"$from"}"

    whom=${from_split[0]:-$nick}
    mesg=${1/"${from:+$from }${fields[*]} "} mesg=${mesg#:}
    dest=${fields[1]:-$chan}

    nc=$'\e[1;3'$((${#whom}/2))m$whom$'\e[m'
    mc=$'\e[1;3'$((${#mesg}/2))m$mesg$'\e[m'

    case ${fields[0]} in
        PRIVMSG) prin '%s %s\n' "$nc" "$mesg" ;;
         NOTICE) prin '%s %s\n' NOTE "$mesg" ;;
           QUIT) prin '%s %s has quit %s\n'   \<-- "$nc" "$dest"  ;;
           PART) prin '%s %s has left %s\n'   \<-- "$nc" "$dest"  ;;
           JOIN) prin '%s %s has joined %s\n' --\> "$nc" "$dest"  ;;
           NICK) prin '%s %s is now known as %s\n' -- "$nc" "$mc" ;;
            353) chan=${fields[3]}  ;;
           PING) printf 'PONG%s\n' "${1##PING}" >&69 ;;
            366) ;;
            376) irc_cmd "${x:-:/}" ;&
              *) prin '%s %s\n' RAW "$mesg"
    esac
}

get_args() {
    while getopts :s:u:p:c:x:P:v opt; do case $opt in
        \?) printf 'use: birch [-s host -u nick -p pass -P port -c chan]\n' 
            exit 1 ;;

         v) printf 'birch 0.0.1\n'
            exit 0 ;;

         :) printf 'Option -%s requires an argument.\n' "$OPTARG" >&2
            exit 1 ;;

         *) declare -g "$opt=$OPTARG" 
    esac; done
}

main() {
    get_args "$@"
    term_size

    export HISTFILE=${TMPDIR:=/tmp}/birch-$$-hist
    mkdir -p "${temp_dir:=$TMPDIR/birch-$$}"
    cd "$temp_dir" || exit 1
    : > current

    irc_setup
    term_setup

    trap clean       INT EXIT
    trap term_resize WINCH

    while read -sru 69; do
        parse "${REPLY%%$'\r'*}"
    done & input=1
    
    while :; do
        read -erp "$chan (${cch:=1}/${#chans[@]}) > " && 
            irc_cmd "$REPLY"

        printf '\e[2K'
    done
}

main "$@" ||:
