#!/usr/bin/env bash
#
# birch - a simple irc client in bash

esc() {
    case $1 in
        cursor_show):  "\\e[?25h"      ;;
        cursor_hide):  "\\e[?25l"      ;;
        cursor_save):  "\\e7"          ;;
        cursor_load):  "\\e8"          ;;
        cursor_move):  "\\e[$2;$3H"    ;;
        cursor_fake):  "\\e[47m \\e[m" ;;
        clear_screen): "\\e[2J"        ;;
        clear_line):   "\\e[K"         ;;
        scroll_area):  "\\e[$2;$3r"    ;;

        *) return
    esac

    printf %b "$_"
}

clean() {
    term_reset
    rm -f "$temp_dir/birch-$pid-"*
    kill 0
}

hist_focus() {
    : >> "$temp_dir/birch-$pid-$chan"
    ln -sf "$temp_dir/birch-$pid-$chan" "$temp_dir/birch-$pid--current"
}

term_setup() {
    esc clear_screen
    esc scroll_area 1 "$((LINES - 1))"
    esc cursor_move 999
}

term_reset() {
    esc clear_screen
    esc scroll_area
    esc cursor_show

    exec 69>&-
}

term_size() {
    resize=

    shopt -s checkwinsize; (:;:)
}

irc_setup() {
    exec 69<>"/dev/tcp/${host:=irc.freenode.net}/${port:-6667}" || {
        printf '%s\n' "error: Couldn't connect to $host." >&2
        exit 1
    }

    IFS=, read -ra channels <<< "${chan:=#kisslinux}"
    chan=${channels[0]}

    printf 'NICK %s\n' "${nick:=$USER}" >&69
    printf 'USER %s - - :%s\n' "$nick" "$nick" >&69
    printf 'PASS %s\n' "${pass:-}" >&69
    printf 'JOIN %s\n' "${channels[@]}" >&69

    hist_focus

    msg_hist=("")
}

irc_parse() {
    mesg=${1#* :}
    www=${1%%$mesg*}

    read -ra args <<< "${www##:}"
    IFS='!@' read -r unick _ _ <<< "${args[0]}"
}

irc_print() {
    if [[ $2 == \#* && "$2" != "$chan" ]]; then
        printf '%s\n' "$1" >> "$temp_dir/birch-$pid-$2"

        [[ " ${channels[*]} " != *" $chan "* ]] &&
            channels+=("$chan")

    else
        printf '\r%s\n' "$1"
        printf '%s\n'   "$1" >> "$temp_dir/birch-$pid--current"
    fi 2>/dev/null
}

irc_cmd() {
    read -ra cmd <<< "$1"

    case $1 in
        "") ;;

        /j*)
            printf 'JOIN %s\n'  "${cmd[1]}" >&69
            printf 'NAMES %s\n' "${cmd[1]}" >&69

            chan=$_
            resize=1

            [[ " ${channels[*]} " != *" $chan "* ]] &&
                channels+=("$chan")

            hist_focus
        ;;

        /l*)
            printf 'PART %s\n' "${cmd[1]:-$chan}" >&69
        ;;

        /me*)
            printf 'PRIVMSG %s :\001ACTION %s\001\n' "$chan" "${cmd[*]:1}" >&69

            printf -v out '%10s \e[1;3%sm%s\e[m %s' \
                "*" "$((${#nick}/2))" "$nick" "${cmd[*]:1}"

            irc_print "$out" "$chan"
        ;;

        /m*)
            printf 'PRIVMSG %s :%s\n' "${cmd[1]}" "${cmd[*]:2}" >&69
        ;;

        /n*)
            printf 'NICK %s\n' "${cmd[1]}" >&69
            nick=$_
        ;;

        /q*)
            printf 'QUIT :%s\n' "${cmd[1]}" >&69
            exit
        ;;

        /*)
            printf '%s\n' "error: ${cmd[0]} not implemented yet."
        ;;

        *)
            printf 'PRIVMSG %s %s\n' "$chan" ":$1" >&69

            printf -v out '\e[1;3%sm%10s\e[m %s' \
                "$((${#nick}/2))" "${nick:0:10}" "$1"

            irc_print "$out" "$chan"
        ;;
    esac
}

irc_output() {
    while read -sru 69 || :; do
        esc cursor_move 0
        ((start++ > 1)) && esc cursor_load

        REPLY=${REPLY%%$'\r'*}

        case $REPLY in
            PING*)
                printf 'PONG%s\n' "${REPLY##PING}" >&69
            ;;

            *PRIVMSG*)
                irc_parse "$REPLY"

                [[ $mesg == *$nick* ]] &&
                    mesg=${mesg//$nick/$'\e[1;3'$((${#unick}/2))m$nick$'\e[m'}

                case $REPLY in
                    *$'\001ACTION'*$'\001'*)
                        mesg=${mesg/$'\001ACTION'}

                        printf -v out '%10s \e[1;3%sm%s\e[m %s' \
                            "*" "$((${#unick}/2))" "$unick" "${mesg/$'\001'}"
                    ;;

                    *)
                        printf -v out '\e[1;3%sm%10s\e[m %s' \
                            "$((${#unick}/2))" "${unick:0:10}" "$mesg"
                    ;;
                esac

                irc_print "$out" "${args[2]}"
            ;;

            *JOIN*|*PART*|*QUIT*)
                REPLY=${REPLY:1}
                unick=${REPLY%%\!*}

                case $REPLY in
                    *JOIN*): '-->joined' ;;
                    *PART*): '<--left'   ;;
                    *QUIT*): '<--quit'   ;;
                esac

                printf -v out '%10s \e[1;3%sm%s\e[m %s \e[1m%s\e[m' \
                    "${_::3}" "$((${#unick}/2))" "$unick" \
                    "has ${_:3}" "#${REPLY##*\#}"

                irc_print "$out" "#${REPLY##*\#}"
            ;;

            *NOTICE*)
                irc_print "${REPLY##*NOTICE }" "$chan"
            ;;

            *NICK*)
                irc_parse "$REPLY"

                printf -v out '%10s %s\n' "--" \
                    "$unick is now known as $mesg"

                irc_print "$out" "$chan"
            ;;

            *353*)
                chan=\#${REPLY##*\#}
                chan=${chan/ *}
            ;;

            *366*) ;;

            *)
                [[ $REPLY == *376* && $comm ]] && irc_cmd "$comm"

                irc_print "$REPLY" "$chan"
            ;;
        esac

        esc cursor_save
        esc cursor_move 999
    done
}

get_args() {
    while getopts :s:u:p:c:x:P:v opt; do
        case $opt in
            s)  host=$OPTARG ;;
            u)  nick=$OPTARG ;;
            p)  pass=$OPTARG ;;
            P)  port=$OPTARG ;;
            c)  chan=$OPTARG ;;
            x)  comm=$OPTARG ;;

            \?) usage ;;

            v)
                printf '%s\n' "$version"
                exit
            ;;

            :)
                printf 'Option -%s requires an argument.\n' "$OPTARG" >&2
                exit 1
            ;;
        esac
    done
}

usage() {
    printf 'usage: birch [-s host -u nick -p pass -P port -c channel]\n'
    exit 1
}


main() {
    pid=$$
    version='birch 0.0.1'

    get_args "$@"
    term_size

    : > "${temp_dir:=/tmp}/birch-$pid--current"

    irc_setup
    term_setup

    trap clean    INT EXIT
    trap resize=1 WINCH

    irc_output &

    for ((;;)) {
        read -er && irc_cmd "$REPLY"

        [[ $resize ]] && {
            term_size
            term_setup

            printf '%s\n' "$(< "$temp_dir/birch-$pid--current")"
        }
    }

    wait
    return 0
}

main "$@"
